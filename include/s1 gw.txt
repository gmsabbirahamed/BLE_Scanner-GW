#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>

// ================= CONFIG =================
#define GW_ID "1101002509170001"

#define WIFI_SSID "Settings"
#define WIFI_PASS "procariota156"

#define MQTT_SERVER "broker2.dma-bd.com"
#define MQTT_PORT 1883
#define MQTT_USER "broker2"
#define MQTT_PASS "Secret!@#$1234"
#define MQTT_TOPIC "DMA/BLE/PUB/TLM"

#define SERIAL2_BAUD 115200
#define SERIAL2_RX 21
#define SERIAL2_TX 22
// ==========================================

WiFiClient espClient;
PubSubClient client(espClient);

String incomingLine = "";

// ---------------- MQTT Reconnect ----------------
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("🔄 Connecting to MQTT...");
    if (client.connect(GW_ID, MQTT_USER, MQTT_PASS)) {
      Serial.println("✅ connected");
    } else {
      Serial.print("❌ failed rc=");
      Serial.println(client.state());
      delay(3000);
    }
  }
}

// ---------------- Publish + ACK ----------------
void publishLine(const String &line) {
  String payload = String(GW_ID) + "," + line;
  bool ok = client.publish(MQTT_TOPIC, payload.c_str());
  if (ok) {
    Serial.print("📤 Sent: ");
    Serial.println(payload);
    Serial2.println("ACK");  // send ACK back
  } else {
    Serial.println("❌ MQTT publish failed");
  }
}

// ---------------- Setup ----------------
void setup() {
  Serial.begin(115200);
  Serial2.begin(SERIAL2_BAUD, SERIAL_8N1, SERIAL2_RX, SERIAL2_TX);

  Serial.print("🌐 WiFi connecting");
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected");
  Serial.println(WiFi.localIP());

  client.setServer(MQTT_SERVER, MQTT_PORT);
}

// ---------------- Loop ----------------
void loop() {
  if (!client.connected()) reconnectMQTT();
  client.loop();

  // Read BLE data from scanner
  while (Serial2.available()) {
    char c = Serial2.read();
    if (c == '\n') {
      incomingLine.trim();
      if (incomingLine.length() > 0 && incomingLine != "END") {
        publishLine(incomingLine);
      }
      incomingLine = "";
    } else {
      incomingLine += c;
    }
  }

}